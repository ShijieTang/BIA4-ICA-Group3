import numpy as np
from skimage import morphology
from skimage import measure
from sklearn.cluster import KMeans
import cv2 as cv
import matplotlib.pyplot as plt

# Read the image file
def Xray_readimg(input_image):
    
    # Import the initial image
    img = cv.imread(input_image,0)
    
    return img

# Image intensification
def Xray_contrast(img, contrast_clipLimit = 1.5, contrast_tileGridSize = (12,12)):
    
    # Adaptive histogram equalization
    clahe = cv.createCLAHE(clipLimit = contrast_clipLimit, tileGridSize = contrast_tileGridSize) 
    img_dst_clahe = clahe.apply(img)
    img_contrast = cv.cvtColor(img_dst_clahe,cv.COLOR_BGR2RGB)

    return img_contrast

# Modify the original image size
def Xray_scale(img, scale_size = (400,400)):
    
    resized_image = cv.resize(img, scale_size)
    rescaled_image = resized_image/255
    
    return rescaled_image

# Image segmentation using the Kmeans clustering algrithm
def Xray_kmeanscluster(img, Kmeanscluster_number = 3, Kmeanscluster_threshold = 0):

    # Transpose the image (initial: (imagesize, imagesize, channels) ==> after: (channeles, imagesize, imagesize))
    img_trans = np.transpose(img, (2, 0, 1))

    # The main areas of the lungs are cropped for KMeans clustering
    x = img_trans.shape[1]
    y = img_trans.shape[2]
    middle = img[int(0.1*x):int(0.9*x), int(0.1*y):int(0.9*y)]
    mean = np.mean(middle)

    # KMeans clustering
    kmeans = KMeans(n_clusters = Kmeanscluster_number).fit(np.reshape(middle, [np.prod(middle.shape), 1]))  
    centers = sorted(kmeans.cluster_centers_.flatten()) 
    
    # Set the threshold for Kmeans clusering result's filteration
    if Kmeanscluster_threshold == 0:
        threshold = np.mean(centers)
    elif Kmeanscluster_threshold > 0 and Kmeanscluster_threshold < 255:
        threshold = Kmeanscluster_threshold
    else:
        print("Error in setting shreshold for Kmeans clustering! Kmeanscluster_threshold should in [0,255]! ")
        threshold = np.mean(centers)

    thresh_img = np.where(img < threshold, 1.0, 0.0) 

    return thresh_img

# Image erosion and dilation
def Xray_ED(img, erosion_operator_size = (2, 2) , dilation_operator_size = (5, 5)):
    
    erosion_operator = np.ones(erosion_operator_size)  
    dilation_operator = np.ones(dilation_operator_size)  

    # Operations are performed to remove some discrete points generated by kmeans clustering, which have a high probability of being non-pulmonary areas
    erosion = cv.erode(img, erosion_operator, iterations=1)
    dilation = cv.dilate(erosion, dilation_operator, iterations=1)
    final_image =  dilation

    return final_image

# Find the connected area   
def Xray_Connectivity(scale_img, ED_img, scale_size = (400,400), connectivity_y_up = 0, connectivity_x_left = 20, connectivity_y_down = 0, connectivity_x_right = 20, connectivity_dilation_size = (7,7)):

    # Identify the connected area
    labels = measure.label(ED_img[:, :, 0])  
    regions = measure.regionprops(labels) 

    # The experience values of the connected area were screened according to the possible general area of the initial lung
    good_regions = []
    for identity in regions:
        area = identity.bbox

        # Area = (y1,x1,y2,x2) is the upper-left and lower-right coordinates of the connected area
        if area[0] > connectivity_y_up and area[1] > connectivity_x_left and area[2] < (scale_size[1] - connectivity_y_down) and area[3] < (scale_size[0] - connectivity_x_right) and (area[2] - area[0]) > 0.25*scale_size[1]:
            good_regions.append(identity.label)
 
    # Obtain the lung mask according to the lung label
    mask = np.ndarray([scale_img.shape[0], scale_img.shape[1]], dtype = np.int8)

    mask[:] = 0
    for N in good_regions:
        mask = mask + np.where(labels == N, 1, 0)

    # Dilation again to fill and expand the lung area
    mask = morphology.dilation(mask, np.ones(connectivity_dilation_size))

    return mask

# combine the scaled image and the mask
def Xray_mask_combining(scale_img, mask_img):
    # Mask merging
    mask_region = scale_img[:, :, 0] * mask_img

    return mask_region
    
def Xray_segmentation(initial_image, final_image, seg_result, mask_result, contrast_clipLimit_value = 1.5, contrast_tileGridSize_value = (12,12), after_scale_size = (400,400), Kmeans_cluster_number = 3, Kmeans_cluster_threshold = 0, erosion_operator_value = (5, 5) , dilation_operator_value = (7, 7), connectivity_y_up_value = 0, connectivity_x_left_value = 20, connectivity_y_down_value = 0, connectivity_x_right_value = 20, connectivity_dilation_size_value = (5,5)):
    
    img = Xray_readimg(initial_image)
    print("Successfully reading the initial image ...")
    
    img_contrast = Xray_contrast(img, contrast_clipLimit = contrast_clipLimit_value, contrast_tileGridSize = contrast_tileGridSize_value)
    print("Successfully enhancing the image ...")
    
    img_contrast_scale = Xray_scale(img_contrast, scale_size = after_scale_size)
    print("Successfully scaling the image ...")
    
    img_contrast_scale_kmeans = Xray_kmeanscluster(img_contrast_scale, Kmeanscluster_number = Kmeans_cluster_number, Kmeanscluster_threshold = Kmeans_cluster_threshold)
    print("Successfully using Kmeans to cluster the pixels in the image ...")

    img_contrast_scale_kmeans_ED = Xray_ED(img_contrast_scale_kmeans, erosion_operator_size = erosion_operator_value , dilation_operator_size = dilation_operator_value)
    print("Successfully applying erosion and dilation ...")

    img_mask = Xray_Connectivity(img_contrast_scale, img_contrast_scale_kmeans_ED, scale_size = after_scale_size, connectivity_y_up = connectivity_y_up_value, connectivity_x_left = connectivity_x_left_value, connectivity_y_down = connectivity_y_down_value, connectivity_x_right = connectivity_x_right_value, connectivity_dilation_size = connectivity_dilation_size_value)
    print("Successfully selecting the chest area ...")

    img_final = Xray_mask_combining(img_contrast_scale, img_mask)
    print("Successfully combining the scaled image and the mask ...")

    # Visualization of the segmentation result
    fig, ax = plt.subplots(2, 2, figsize=[12, 12])
    ax[0, 0].imshow(img, cmap='gray')  
    ax[0, 0].set_title("Initial image")
    ax[0, 1].imshow(img_contrast_scale)  
    ax[0, 1].set_title("Contrast enhanced scaled image")
    ax[1, 0].imshow(img_mask, cmap='gray')  
    ax[1, 0].set_title("Kmeans segmentation area")
    ax[1, 1].imshow(img_final, cmap='gray')  
    ax[1, 1].set_title("Segmentation result")
    
    # Save the segmentation results
    cv.imwrite(seg_result, img_final*255)
    cv.imwrite(mask_result, img_mask*255)
    plt.savefig(final_image)
    plt.show()

# Example
# Xray_segmentation("Normal-4.png","all_results.png","seg_result.png","mask_result.png")